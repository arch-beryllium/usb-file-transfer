#!/bin/bash

# ConfigFS script is taken from postmarketOS
# https://postmarketos.org

# These are very important, it defines what is the device:

deviceinfo_usb_idVendor="0x2717"
deviceinfo_usb_idProduct="0x0000"
deviceinfo_manufacturer="Xiaomi"
deviceinfo_name="Arch Linux ARM"
deviceinfo_usb_serialnumber="beryllium"
deviceinfo_usb_rndis_function="rndis.usb0"
deviceinfo_usb_mass_storage_function="mass_storage.0"

setup_usb_file_transfer_configfs() {
  # See: https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt
  CONFIGFS=/sys/kernel/config/usb_gadget/

  if ! [ -e "$CONFIGFS" ]; then
    echo "$CONFIGFS does not exist, skipping configfs usb gadget"
    return
  fi

  # Remove the standard usb-tethering widget to replace it
  rm $CONFIGFS/g1/configs/c.1/$deviceinfo_usb_rndis_function $CONFIGFS/g1/configs/c.1/$deviceinfo_usb_mass_storage_function -rf

  echo "Setting up an USB gadget through configfs"
  # Create an usb gadet configuration
  mkdir -p $CONFIGFS/g1 || echo "Couldn't create $CONFIGFS/g1"
  echo "$deviceinfo_usb_idVendor" >"$CONFIGFS/g1/idVendor"
  echo "$deviceinfo_usb_idProduct" >"$CONFIGFS/g1/idProduct"

  # Create english (0x409) strings
  mkdir -p $CONFIGFS/g1/strings/0x409 || echo "Couldn't create $CONFIGFS/g1/strings/0x409"

  # shellcheck disable=SC2154
  echo "$deviceinfo_manufacturer" >"$CONFIGFS/g1/strings/0x409/manufacturer"
  echo "$deviceinfo_usb_serialnumber" >"$CONFIGFS/g1/strings/0x409/serialnumber"
  # shellcheck disable=SC2154
  echo "$deviceinfo_name" >"$CONFIGFS/g1/strings/0x409/product"

  # Create rndis/mass_storage function. The function can be named differently in downstream kernels.
  mkdir -p $CONFIGFS/g1/functions/"$deviceinfo_usb_rndis_function" ||
    echo "Couldn't create $CONFIGFS/g1/functions/$deviceinfo_usb_rndis_function"
  mkdir -p $CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function" ||
    echo "Couldn't create $CONFIGFS/g1/functions/$deviceinfo_usb_mass_storage_function"
  mkdir -p $CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function/lun.1" ||
    echo "Couldn't create $CONFIGFS/g1/functions/$deviceinfo_usb_mass_storage_function/lun.1"

  # Create configuration instance for the gadget
  mkdir -p $CONFIGFS/g1/configs/c.1 ||
    echo "Couldn't create $CONFIGFS/g1/configs/c.1"
  mkdir -p $CONFIGFS/g1/configs/c.1/strings/0x409 ||
    echo "Couldn't create $CONFIGFS/g1/configs/c.1/strings/0x409"
  echo "rndis" >$CONFIGFS/g1/configs/c.1/strings/0x409/configuration ||
    echo "Couldn't write configuration name"

  # Set up mass storage to rootfs
  root_mountpoint="$(df / | grep -E -o '^[/a-z0-9]*')"
  echo "$root_mountpoint" >$CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function"/lun.0/file
  if [ -e /dev/mmcblk0 ] && [[ "$root_mountpoint" != /dev/mmcblk0 ]]; then
    echo "Detected SD card that is not the rootfs. Exposing it too"
    echo /dev/mmcblk0 >$CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function"/lun.1/file
  fi

  # Rename the mass storage device
  echo "ALARM home" >$CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function"/lun.0/inquiry_string
  echo "ALARM microSD" >$CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function"/lun.1/inquiry_string

  # Link the rndis/mass_storage instance to the configuration
  ln -s $CONFIGFS/g1/functions/"$deviceinfo_usb_rndis_function" $CONFIGFS/g1/configs/c.1 ||
    echo "Couldn't symlink $deviceinfo_usb_rndis_function"
  ln -s $CONFIGFS/g1/functions/"$deviceinfo_usb_mass_storage_function" $CONFIGFS/g1/configs/c.1 ||
    echo "Couldn't symlink $deviceinfo_usb_mass_storage_function"

  # Check if there's an USB Device Controller
  if [ -z "$(ls /sys/class/udc)" ]; then
    echo "No USB Device Controller available"
    return
  fi

  # Link the gadget instance to an USB Device Controller. This activates the gadget.
  # See also: https://github.com/postmarketOS/pmbootstrap/issues/338
  # shellcheck disable=SC2005
  echo "$(ls /sys/class/udc)" >$CONFIGFS/g1/UDC || echo "Couldn't write UDC"
}

# And we go.
setup_usb_file_transfer_configfs
